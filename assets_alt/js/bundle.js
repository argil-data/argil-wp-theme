"use strict";(self.webpackChunkargilfoliox=self.webpackChunkargilfoliox||[]).push([[852],{774:function(t){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(r[s]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);i&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},95:function(t){function e(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null==n)return;var i,r,o=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);s=!0);}catch(t){u=!0,r=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw r}}return o}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return n(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return n(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n=e(t,4),i=n[1],r=n[3];if(!r)return i;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),u="/*# ".concat(s," */"),c=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[i].concat(c).concat([u]).join("\n")}return[i].join("\n")}},130:function(t,e,n){var i=n(931),r=(n(972),n(280),n(709),n(702)),o=n.n(r);window.jQuery=window.$=n(702),o()(".c-navigation").on("mouseenter",".menu-item-has-children",(function(t){o()(t.currentTarget).parent(".sub-menu").length||o()(".menu > .menu-item.open").find(" > a > .menu-button").trigger("click"),o()(t.currentTarget).addClass("open")})).on("mouseleave",".menu-item-has-children",(function(t){o()(t.currentTarget).removeClass("open")})),o()(".c-navigation").on("click",".menu .menu-button",(function(t){t.preventDefault(),t.stopPropagation();var e=o()(t.currentTarget),n=e.parent(),i=n.parent();console.log(i),i.hasClass("open")?(i.add(i.find(".menu-item.open")).removeClass("open"),n.add(i.find("a")).attr("aria-expanded","false"),e.find("menu-button-show").attr("aria-hidden","false"),e.find("menu-button-hide").attr("aria-hidden","true")):(i.siblings(".open").find(" > a > .menu-button").trigger("click"),i.addClass("open"),n.attr("aria-expanded","true"),e.find("menu-button-show").attr("aria-hidden","true"),e.find("menu-button-hide").attr("aria-hidden","false"))})),o()(document).click((function(t){o()(".menu-item.open").length&&o()(".menu > .menu-item.open > a > .menu-button").trigger("click")})),window.jQuery=window.$=n(702),window.Swiper=n(931),console.log("Hello from bundleJS!");var s=document.getElementById("js-top");window.addEventListener("scroll",(function(){var t=window.scrollY;s.className=t>0?"top-link show":"top-link hide"}));jQuery((function(t){var e,n,r=(e=t(".js-accordion").find(".js-accordion-header"),t(".js-accordion-item"),n={speed:400,oneOpen:!1},{init:function(i){e.on("click",(function(){r.toggle(t(this))})),t.extend(n,i),n.oneOpen&&t(".js-accordion-item.active").length>1&&t(".js-accordion-item.active:not(:first)").removeClass("active"),t(".js-accordion-item.active").find("> .js-accordion-body").show()},toggle:function(t){n.oneOpen&&t[0]!=t.closest(".js-accordion").find("> .js-accordion-item.active > .js-accordion-header")[0]&&t.closest(".js-accordion").find("> .js-accordion-item").removeClass("active").find(".js-accordion-body").slideUp(),t.closest(".js-accordion-item").toggleClass("active"),t.next().stop().slideToggle(n.speed)}});t((function(){r.init({speed:300,oneOpen:!0})})),i.default.use([i.Navigation,i.Pagination]),new i.default(".swiper",{modules:[i.Navigation,i.Pagination],direction:"horizontal",a11y:!0,autoplay:!0,centeredSlides:!0,speed:400,slidesPerView:1,pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},scrollbar:{el:".swiper-scrollbar"}}).init()}))},257:function(t,e,n){var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function u(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},i=[],r=0;r<t.length;r++){var o=t[r],c=e.base?o[0]+e.base:o[0],l=n[c]||0,a="".concat(c," ").concat(l);n[c]=l+1;var f=u(a),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(s[f].references++,s[f].updater(h)):s.push({identifier:a,updater:g(h,e),references:1}),i.push(a)}return i}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var a,f=(a=[],function(t,e){return a[t]=e,a.filter(Boolean).join("\n")});function h(t,e,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=f(e,r);else{var o=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function d(t,e,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var p=null,m=0;function g(t,e){var n,i,r;if(e.singleton){var o=m++;n=p||(p=l(e)),i=h.bind(null,n,o,!1),r=h.bind(null,n,o,!0)}else n=l(e),i=d.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=r());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var r=u(n[i]);s[r].references--}for(var o=c(t,e),l=0;l<n.length;l++){var a=u(n[l]);0===s[a].references&&(s[a].updater(),s.splice(a,1))}n=o}}}},227:function(t,e,n){n.d(e,{$:function(){return u},Ce:function(){return I},IV:function(){return l},Kz:function(){return A},Lj:function(){return h},Od:function(){return F},Pb:function(){return w},R3:function(){return k},S1:function(){return v},S6:function(){return x},Vj:function(){return a},W2:function(){return S},X$:function(){return y},cn:function(){return c},cv:function(){return L},dy:function(){return T},eG:function(){return _},eR:function(){return m},eq:function(){return M},fL:function(){return N},hX:function(){return C},iO:function(){return E},is:function(){return O},iv:function(){return j},ld:function(){return b},lp:function(){return P},mp:function(){return J},on:function(){return g},oq:function(){return H},pI:function(){return R},pJ:function(){return V},pv:function(){return f},qm:function(){return q},sE:function(){return D},uV:function(){return d},vs:function(){return p},wV:function(){return B}});var i=n(959);class r extends Array{constructor(t){"number"==typeof t?super(t):(super(...t||[]),function(t){const e=t.__proto__;Object.defineProperty(t,"__proto__",{get:()=>e,set(t){e.__proto__=t}})}(this))}}function o(t=[]){const e=[];return t.forEach((t=>{Array.isArray(t)?e.push(...o(t)):e.push(t)})),e}function s(t,e){return Array.prototype.filter.call(t,e)}function u(t,e){const n=(0,i.Jj)(),o=(0,i.Me)();let s=[];if(!e&&t instanceof r)return t;if(!t)return new r(s);if("string"==typeof t){const n=t.trim();if(n.indexOf("<")>=0&&n.indexOf(">")>=0){let t="div";0===n.indexOf("<li")&&(t="ul"),0===n.indexOf("<tr")&&(t="tbody"),0!==n.indexOf("<td")&&0!==n.indexOf("<th")||(t="tr"),0===n.indexOf("<tbody")&&(t="table"),0===n.indexOf("<option")&&(t="select");const e=o.createElement(t);e.innerHTML=n;for(let t=0;t<e.childNodes.length;t+=1)s.push(e.childNodes[t])}else s=function(t,e){if("string"!=typeof t)return[t];const n=[],i=e.querySelectorAll(t);for(let t=0;t<i.length;t+=1)n.push(i[t]);return n}(t.trim(),e||o)}else if(t.nodeType||t===n||t===o)s.push(t);else if(Array.isArray(t)){if(t instanceof r)return t;s=t}return new r(function(t){const e=[];for(let n=0;n<t.length;n+=1)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(s))}function c(...t){const e=o(t.map((t=>t.split(" "))));return this.forEach((t=>{t.classList.add(...e)})),this}function l(...t){const e=o(t.map((t=>t.split(" "))));return this.forEach((t=>{t.classList.remove(...e)})),this}function a(...t){const e=o(t.map((t=>t.split(" "))));this.forEach((t=>{e.forEach((e=>{t.classList.toggle(e)}))}))}function f(...t){const e=o(t.map((t=>t.split(" "))));return s(this,(t=>e.filter((e=>t.classList.contains(e))).length>0)).length>0}function h(t,e){if(1===arguments.length&&"string"==typeof t)return this[0]?this[0].getAttribute(t):void 0;for(let n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(t,e);else for(const e in t)this[n][e]=t[e],this[n].setAttribute(e,t[e]);return this}function d(t){for(let e=0;e<this.length;e+=1)this[e].removeAttribute(t);return this}function p(t){for(let e=0;e<this.length;e+=1)this[e].style.transform=t;return this}function m(t){for(let e=0;e<this.length;e+=1)this[e].style.transitionDuration="string"!=typeof t?`${t}ms`:t;return this}function g(...t){let[e,n,i,r]=t;function o(t){const e=t.target;if(!e)return;const r=t.target.dom7EventData||[];if(r.indexOf(t)<0&&r.unshift(t),u(e).is(n))i.apply(e,r);else{const t=u(e).parents();for(let e=0;e<t.length;e+=1)u(t[e]).is(n)&&i.apply(t[e],r)}}function s(t){const e=t&&t.target&&t.target.dom7EventData||[];e.indexOf(t)<0&&e.unshift(t),i.apply(this,e)}"function"==typeof t[1]&&([e,i,r]=t,n=void 0),r||(r=!1);const c=e.split(" ");let l;for(let t=0;t<this.length;t+=1){const e=this[t];if(n)for(l=0;l<c.length;l+=1){const t=c[l];e.dom7LiveListeners||(e.dom7LiveListeners={}),e.dom7LiveListeners[t]||(e.dom7LiveListeners[t]=[]),e.dom7LiveListeners[t].push({listener:i,proxyListener:o}),e.addEventListener(t,o,r)}else for(l=0;l<c.length;l+=1){const t=c[l];e.dom7Listeners||(e.dom7Listeners={}),e.dom7Listeners[t]||(e.dom7Listeners[t]=[]),e.dom7Listeners[t].push({listener:i,proxyListener:s}),e.addEventListener(t,s,r)}}return this}function v(...t){let[e,n,i,r]=t;"function"==typeof t[1]&&([e,i,r]=t,n=void 0),r||(r=!1);const o=e.split(" ");for(let t=0;t<o.length;t+=1){const e=o[t];for(let t=0;t<this.length;t+=1){const o=this[t];let s;if(!n&&o.dom7Listeners?s=o.dom7Listeners[e]:n&&o.dom7LiveListeners&&(s=o.dom7LiveListeners[e]),s&&s.length)for(let t=s.length-1;t>=0;t-=1){const n=s[t];i&&n.listener===i||i&&n.listener&&n.listener.dom7proxy&&n.listener.dom7proxy===i?(o.removeEventListener(e,n.proxyListener,r),s.splice(t,1)):i||(o.removeEventListener(e,n.proxyListener,r),s.splice(t,1))}}}return this}function y(...t){const e=(0,i.Jj)(),n=t[0].split(" "),r=t[1];for(let i=0;i<n.length;i+=1){const o=n[i];for(let n=0;n<this.length;n+=1){const i=this[n];if(e.CustomEvent){const n=new e.CustomEvent(o,{detail:r,bubbles:!0,cancelable:!0});i.dom7EventData=t.filter(((t,e)=>e>0)),i.dispatchEvent(n),i.dom7EventData=[],delete i.dom7EventData}}}return this}function b(t){const e=this;return t&&e.on("transitionend",(function n(i){i.target===this&&(t.call(this,i),e.off("transitionend",n))})),this}function E(t){if(this.length>0){if(t){const t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null}function w(t){if(this.length>0){if(t){const t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null}function L(){if(this.length>0){const t=(0,i.Jj)(),e=(0,i.Me)(),n=this[0],r=n.getBoundingClientRect(),o=e.body,s=n.clientTop||o.clientTop||0,u=n.clientLeft||o.clientLeft||0,c=n===t?t.scrollY:n.scrollTop,l=n===t?t.scrollX:n.scrollLeft;return{top:r.top+c-s,left:r.left+l-u}}return null}function S(){const t=(0,i.Jj)();return this[0]?t.getComputedStyle(this[0],null):{}}function j(t,e){const n=(0,i.Jj)();let r;if(1===arguments.length){if("string"!=typeof t){for(r=0;r<this.length;r+=1)for(const e in t)this[r].style[e]=t[e];return this}if(this[0])return n.getComputedStyle(this[0],null).getPropertyValue(t)}if(2===arguments.length&&"string"==typeof t){for(r=0;r<this.length;r+=1)this[r].style[t]=e;return this}return this}function x(t){return t?(this.forEach(((e,n)=>{t.apply(e,[e,n])})),this):this}function C(t){return u(s(this,t))}function T(t){if(void 0===t)return this[0]?this[0].innerHTML:null;for(let e=0;e<this.length;e+=1)this[e].innerHTML=t;return this}function N(t){if(void 0===t)return this[0]?this[0].textContent.trim():null;for(let e=0;e<this.length;e+=1)this[e].textContent=t;return this}function O(t){const e=(0,i.Jj)(),n=(0,i.Me)(),o=this[0];let s,c;if(!o||void 0===t)return!1;if("string"==typeof t){if(o.matches)return o.matches(t);if(o.webkitMatchesSelector)return o.webkitMatchesSelector(t);if(o.msMatchesSelector)return o.msMatchesSelector(t);for(s=u(t),c=0;c<s.length;c+=1)if(s[c]===o)return!0;return!1}if(t===n)return o===n;if(t===e)return o===e;if(t.nodeType||t instanceof r){for(s=t.nodeType?[t]:t,c=0;c<s.length;c+=1)if(s[c]===o)return!0;return!1}return!1}function A(){let t,e=this[0];if(e){for(t=0;null!==(e=e.previousSibling);)1===e.nodeType&&(t+=1);return t}}function M(t){if(void 0===t)return this;const e=this.length;if(t>e-1)return u([]);if(t<0){const n=e+t;return u(n<0?[]:[this[n]])}return u([this[t]])}function k(...t){let e;const n=(0,i.Me)();for(let i=0;i<t.length;i+=1){e=t[i];for(let t=0;t<this.length;t+=1)if("string"==typeof e){const i=n.createElement("div");for(i.innerHTML=e;i.firstChild;)this[t].appendChild(i.firstChild)}else if(e instanceof r)for(let n=0;n<e.length;n+=1)this[t].appendChild(e[n]);else this[t].appendChild(e)}return this}function I(t){const e=(0,i.Me)();let n,o;for(n=0;n<this.length;n+=1)if("string"==typeof t){const i=e.createElement("div");for(i.innerHTML=t,o=i.childNodes.length-1;o>=0;o-=1)this[n].insertBefore(i.childNodes[o],this[n].childNodes[0])}else if(t instanceof r)for(o=0;o<t.length;o+=1)this[n].insertBefore(t[o],this[n].childNodes[0]);else this[n].insertBefore(t,this[n].childNodes[0]);return this}function P(t){return this.length>0?t?this[0].nextElementSibling&&u(this[0].nextElementSibling).is(t)?u([this[0].nextElementSibling]):u([]):this[0].nextElementSibling?u([this[0].nextElementSibling]):u([]):u([])}function _(t){const e=[];let n=this[0];if(!n)return u([]);for(;n.nextElementSibling;){const i=n.nextElementSibling;t?u(i).is(t)&&e.push(i):e.push(i),n=i}return u(e)}function J(t){if(this.length>0){const e=this[0];return t?e.previousElementSibling&&u(e.previousElementSibling).is(t)?u([e.previousElementSibling]):u([]):e.previousElementSibling?u([e.previousElementSibling]):u([])}return u([])}function V(t){const e=[];let n=this[0];if(!n)return u([]);for(;n.previousElementSibling;){const i=n.previousElementSibling;t?u(i).is(t)&&e.push(i):e.push(i),n=i}return u(e)}function q(t){const e=[];for(let n=0;n<this.length;n+=1)null!==this[n].parentNode&&(t?u(this[n].parentNode).is(t)&&e.push(this[n].parentNode):e.push(this[n].parentNode));return u(e)}function B(t){const e=[];for(let n=0;n<this.length;n+=1){let i=this[n].parentNode;for(;i;)t?u(i).is(t)&&e.push(i):e.push(i),i=i.parentNode}return u(e)}function H(t){let e=this;return void 0===t?u([]):(e.is(t)||(e=e.parents(t).eq(0)),e)}function D(t){const e=[];for(let n=0;n<this.length;n+=1){const i=this[n].querySelectorAll(t);for(let t=0;t<i.length;t+=1)e.push(i[t])}return u(e)}function R(t){const e=[];for(let n=0;n<this.length;n+=1){const i=this[n].children;for(let n=0;n<i.length;n+=1)t&&!u(i[n]).is(t)||e.push(i[n])}return u(e)}function F(){for(let t=0;t<this.length;t+=1)this[t].parentNode&&this[t].parentNode.removeChild(this[t]);return this}u.fn=r.prototype;const U="resize scroll".split(" ");function $(t){return function(...e){if(void 0===e[0]){for(let e=0;e<this.length;e+=1)U.indexOf(t)<0&&(t in this[e]?this[e][t]():u(this[e]).trigger(t));return this}return this.on(t,...e)}}$("click"),$("blur"),$("focus"),$("focusin"),$("focusout"),$("keyup"),$("keydown"),$("keypress"),$("submit"),$("change"),$("mousedown"),$("mousemove"),$("mouseup"),$("mouseenter"),$("mouseleave"),$("mouseout"),$("mouseover"),$("touchstart"),$("touchend"),$("touchmove"),$("resize"),$("scroll")},959:function(t,e,n){function i(t){return null!==t&&"object"==typeof t&&"constructor"in t&&t.constructor===Object}function r(t={},e={}){Object.keys(e).forEach((n=>{void 0===t[n]?t[n]=e[n]:i(e[n])&&i(t[n])&&Object.keys(e[n]).length>0&&r(t[n],e[n])}))}n.d(e,{Jj:function(){return c},Me:function(){return s}});const o={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function s(){const t="undefined"!=typeof document?document:{};return r(t,o),t}const u={document:o,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:t=>"undefined"==typeof setTimeout?(t(),null):setTimeout(t,0),cancelAnimationFrame(t){"undefined"!=typeof setTimeout&&clearTimeout(t)}};function c(){const t="undefined"!=typeof window?window:{};return r(t,u),t}}},function(t){t.O(0,[931],(function(){return e=130,t(t.s=e);var e}));t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,